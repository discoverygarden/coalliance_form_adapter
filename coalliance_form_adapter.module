<?php

// $Id$

/**
 * @file
 */

/**
 * Implements Hook Menu.
 * 
 * @return array 
 */
function coalliance_form_adapter_menu() {
  $items['formbuilder/ingest'] = array(
    'title' => 'Ingest',
    'description' => 'Ingest',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('coalliance_form_adapter_ingest_form'),
    'access arguments' => array('ingest new fedora objects'),
    'type' => MENU_CALLBACK,
  );
  $items['formbuilder/edit'] = array(
    'title' => 'Edit Metadata',
    'description' => 'Edit Metadata',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('coalliance_form_adapter_edit_form'),
    'access arguments' => array('edit fedora meta data'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Get Ingest Form.
 *
 * @param array $form_state
 * @param string $collection_pid
 * 
 * @return array
 */
function coalliance_form_adapter_ingest_form(array &$form_state, $collection_pid = NULL) {
  if (!user_access('ingest new fedora objects')) {
    drupal_set_message(t('You do not have permission to ingest.'), 'error');
    return FALSE;
  }
  module_load_include('inc', 'fedora_repository', 'SecurityClass');
  $security_class = new SecurityClass();
  if (!$security_class->canIngestHere($collection_pid)) {
// Queries the collection object for a child security datastream and if found parses it
// to determine if this user is allowed to ingest in this collection
// we assume if they are able to modify objects in the collection they can ingest as well.
    drupal_set_message(t('You do not have premission to ingest here.'));
    return FALSE;
  }
  if ($collection_pid == NULL) {
    $collection_pid = variable_get('fedora_repository_pid', 'islandora:top');
  }
  module_load_include('inc', 'islandora_content_model_forms', 'IngestObjectMetadataForm');
  try {
    $ingest_form = new IngestObjectMetadataForm();
    $form = $ingest_form->create($collection_pid, NULL, $form_state);
    /**
     * Hactastic stuff for the work flow module.
     */
    if (module_exists('islandora_workflow') && $form_state['storage']['step'] > 1) {
      module_load_include('inc', 'islandora_workflow', 'islandora_workflow');
      global $user;
      $index = array_search('submit', array_keys($form));
      $index = $index === FALSE ? count($form) : $index; // Not found... Append to the end.
      // Workflow
      $collections = islandora_workflow_get_current_users_collections('islandora_workflow_Manager');
      $show = (isset($collections[$collection_pid]) || user_access('islandora_workflow_Administrator') || $user->uid == 1) ? TRUE : FALSE;
      $collections = islandora_workflow_get_current_users_collections('all');
      $default = $show ?
          1 :
          (isset($collections[$collection_pid])) ? 1 : 0;
      $default = (user_access('islandora_workflow_Administrator') || $user->uid == 1) ? TRUE : FALSE;
      // End workflow
      $workflow['workflow'] = array(
        '#type' => ($show) ? 'checkbox' : 'hidden',
        '#title' => 'Create Workflow',
        '#description' => t('Create\'s a work flow datastream for this object.'),
        '#return_value' => 1,
        '#default_value' => $default,
      );
      $end = array_splice($form, $index);
      return array_merge($form, $workflow, $end);
    }
    return $form;
  } catch (Exception $e) {
    $msg = "File: {$e->getFile()}<br/>Line: {$e->getLine()}<br/>Error: {$e->getMessage()}";
    drupal_set_message($msg, 'error');
    return array();
  }
}

/**
 * Validate Ingest Form.
 * 
 * @param array $form
 * @param array $form_state
 */
function coalliance_form_adapter_ingest_form_validate(array &$form, array &$form_state) {
  if ($form_state['storage']['step'] == 1) {
    $form_state['storage']['step']++;
    $form_state['rebuild'] = TRUE;
  }
  else {
    module_load_include('inc', 'xml_form_api', 'XMLForm');
    $xml_form = new XMLForm($form_state);
    $xml_form->validate($form, $form_state);
  }
}

/**
 * Submit Ingest Form.
 * 
 * @param array $form
 * @param array $form_state
 */
function coalliance_form_adapter_ingest_form_submit(array &$form, array &$form_state) {
  module_load_include('inc', 'islandora_content_model_forms', 'IngestObjectMetadataForm');
  if ($form_state['storage']['step'] == 2) {
    try {
      $ingest_form = new IngestObjectMetadataForm();
      $ingest_form->submit($form, $form_state);
      if (module_exists('islandora_workflow') && $form_state['values']['workflow'] == 1) {
        module_load_include('inc', 'islandora_workflow', 'islandora_workflow');
        islandora_workflow_init_workflow($form_state['values']['pid']); // PID gets set in the submit function above.
      }
    } catch (Exception $e) {
      $msg = "File: {$e->getFile()}<br/>Line: {$e->getLine()}<br/>Error: {$e->getMessage()}";
      drupal_set_message($msg, 'error');
      $form_state['rebuild'] = TRUE;
    }
  }
}

/**
 * Get Edit Form.
 *
 * @param array $form_state
 * @param string $collection_pid
 * 
 * @return array
 */
function coalliance_form_adapter_edit_form(array &$form_state, $pid=NULL) {
  module_load_include('inc', 'islandora_content_model_forms', 'EditObjectMetadataForm');
  module_load_include('inc', 'fedora_repository', 'ConnectionHelper');
  if (!$pid) {
    $pid = variable_get('fedora_repository_pid', 'islandora:top');
  }
  $connection_helper = new ConnectionHelper();
  $client = $connection_helper->getSoapClient(variable_get('fedora_soap_url', 'http://localhost:8080/fedora/services/access?wsdl'));
  try {
    $edit_form = new EditObjectMetadataForm();
    return $edit_form->create($pid, $client, $form_state);
  } catch (Exception $e) {
    $msg = "File: {$e->getFile()}<br/>Line: {$e->getLine()}<br/>Error: {$e->getMessage()}";
    drupal_set_message($msg, 'error');
    return array();
  }
}

/**
 * Validate Edit Form.
 * 
 * @param array $form
 * @param array $form_state
 */
function coalliance_form_adapter_edit_form_validate(array &$form, array &$form_state) {
  if ($form_state['storage']['step'] == 1) {
    $form_state['storage']['step']++;
    $form_state['rebuild'] = TRUE;
  }
  else {
    module_load_include('inc', 'xml_form_api', 'XMLForm');
    $xml_form = new XMLForm($form_state);
    $xml_form->validate($form, $form_state);
  }
}

/**
 * Submit Edit Form.
 * 
 * @param array $form
 * @param array $form_state
 */
function coalliance_form_adapter_edit_form_submit(array &$form, array &$form_state) {
  module_load_include('inc', 'islandora_content_model_forms', 'EditObjectMetadataForm');
  try {
    $edit_form = new EditObjectMetadataForm();
    $edit_form->submit($form, $form_state);
  } catch (Exception $e) {
    $msg = "File: {$e->getFile()}<br/>Line: {$e->getLine()}<br/>Error: {$e->getMessage()}";
    drupal_set_message($msg, 'error');
    $form_state['rebuild'] = TRUE;
  }
}

/**
 * 
 */
function coalliance_form_adapter_restore_forms_to_default() {
  module_load_include('inc', 'xml_form_builder', 'XMLFormDatabase');
  $module_path = drupal_get_path('module', 'coalliance_form_adapter');
  $forms = array('colorado', 'etd', 'collection', 'publications');
  foreach ($forms as $form) {
    if (!XMLFormDatabase::Exists($form)) {
      $doc = new DOMDocument();
      $doc->load($module_path . '/' . $form . '.xml');
      XMLFormDatabase::Create($form, $doc);
    }
    else {
      $doc = new DOMDocument();
      $doc->load($module_path . '/' . $form . '.xml');
      XMLFormDatabase::Update($form, $doc);
    }
  }
}

function coalliance_form_adapter_form_xml_form_builder_main_alter(array &$form, array &$form_state) {
  $form[0]['default'] = array(
    '#type' => 'submit',
    '#value' => t('Restore Defaults'),
    '#name' => 'default',
    '#submit' => array('coalliance_form_adapter_restore_forms_to_default')
  );
}